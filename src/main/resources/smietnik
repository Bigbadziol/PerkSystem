===========================================================================
  GLOWKI , DODAWANIE METODA UNSAFE , MODYFIKACJA PROFILE FIELD
===========================================================================

/*
    public ItemStack makeSkull(String base64EncodedString) {
        final ItemStack skull = new ItemStack(Material.PLAYER_HEAD);
        SkullMeta meta = (SkullMeta) skull.getItemMeta();
        assert meta != null;

        GameProfile profile = new GameProfile(UUID.randomUUID(), null);
        profile.getProperties().put("textures", new Property("textures", base64EncodedString));
        try {
            Field profileField = meta.getClass().getDeclaredField("profile");
            profileField.setAccessible(true);
            profileField.set(meta, profile);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        skull.setItemMeta(meta);
        return skull;
    }

 */
/*
    @SuppressWarnings("deprecation")
    public ItemStack getHeadFromValue(String value) {
        UUID id = UUID.nameUUIDFromBytes(value.getBytes());
        int less = (int) id.getLeastSignificantBits();
        int most = (int) id.getMostSignificantBits();
        return Bukkit.getUnsafe().modifyItemStack(
                new ItemStack(Material.PLAYER_HEAD),
                "{SkullOwner:{Id:[I;" + (less * most) + "," + (less >> 23) + "," + (most / less) + "," + (most * 8731) + "],Properties:{textures:[{Value:\"" + value + "\"}]}}}"
        );
    }

 */
    @SuppressWarnings("deprecation")
    public ItemStack ustawTexture(ItemStack glowka, String value) {
        UUID id = UUID.nameUUIDFromBytes(value.getBytes());
        int less = (int) id.getLeastSignificantBits();
        int most = (int) id.getMostSignificantBits();
        return Bukkit.getUnsafe().modifyItemStack(glowka,"{SkullOwner:{Id:[I;" + (less * most) + "," + (less >> 23) + "," + (most / less) + "," + (most * 8731) + "],Properties:{textures:[{Value:\"" + value + "\"}]}}}");
    }
--------
   @SuppressWarnings("deprecation")
    public ItemStack getHeadFromValue(String value) {
        UUID id = UUID.nameUUIDFromBytes(value.getBytes());
        int less = (int) id.getLeastSignificantBits();
        int most = (int) id.getMostSignificantBits();
        return Bukkit.getUnsafe().modifyItemStack(
                new ItemStack(Material.PLAYER_HEAD),
                "{SkullOwner:{Id:[I;" + (less * most) + "," + (less >> 23) + "," + (most / less) + "," + (most * 8731) + "],Properties:{textures:[{Value:\"" + value + "\"}]}}}"
        );
    }

    @SuppressWarnings("deprecation")
    public ItemStack ustawTexture(ItemStack glowka, String value) {
        UUID id = UUID.nameUUIDFromBytes(value.getBytes());
        int less = (int) id.getLeastSignificantBits();
        int most = (int) id.getMostSignificantBits();
        return Bukkit.getUnsafe().modifyItemStack(glowka,"{SkullOwner:{Id:[I;" + (less * most) + "," + (less >> 23) + "," + (most / less) + "," + (most * 8731) + "],Properties:{textures:[{Value:\"" + value + "\"}]}}}");
    }

    public ItemStack makeSkull(String base64EncodedString) {
        final ItemStack skull = new ItemStack(Material.PLAYER_HEAD);
        SkullMeta meta = (SkullMeta) skull.getItemMeta();
        assert meta != null;

        GameProfile profile = new GameProfile(UUID.randomUUID(), null);
        profile.getProperties().put("textures", new Property("textures", base64EncodedString));

        try {
            Field profileField = meta.getClass().getDeclaredField("profile");
            profileField.setAccessible(true);
            profileField.set(meta, profile);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
        skull.setItemMeta(meta);
        return skull;
    }
    ===========================================================================
    Testy w gui , do tego co wyzej , narazie zostawic
    ===========================================================================
/*
        String nazwaId="";
        Long czasAktywnosci = 0L;
        boolean pasywny = false;

        Perk testPerk1 = new PerkNiejadek();         //tworzymy przykladowego perka ,
        ItemStack testGlowka1 = testPerk1.getPerk();  // pobieramy glowke , ktora dodamy
        inventory.addItem(testGlowka1);  //dodajemy glowke
        nazwaId = NBT.get(testGlowka1, nbt -> nbt.getString("nazwaId"));
        czasAktywnosci = NBT.get(testGlowka1,nbt-> nbt.getLong("czasAktywnosci"));
        pasywny = NBT.get(testGlowka1,nbt-> nbt.getBoolean("pasywny"));
        System.out.println("perk - nazwaId :"+nazwaId+ " pasywny :"+pasywny+" czas aktywnosci :"+czasAktywnosci);

        Perk testPerk2 = new PerkSilacz();         //tworzymy przykladowego perka ,
        ItemStack testGlowka2 = testPerk2.getPerk();  // pobieramy glowke , ktora dodamy
        inventory.addItem(testGlowka2);  //dodajemy glowke
        nazwaId = NBT.get(testGlowka2, nbt -> nbt.getString("nazwaId"));
        czasAktywnosci = NBT.get(testGlowka2,nbt-> nbt.getLong("czasAktywnosci"));
        pasywny = NBT.get(testGlowka2,nbt-> nbt.getBoolean("pasywny"));
        System.out.println("perk - nazwaId :"+nazwaId+ " pasywny :"+pasywny+" czas aktywnosci :"+czasAktywnosci);
/*
        //GLOWKA 1
        ItemStack skull = new ItemStack(Material.PLAYER_HEAD);
        SkullMeta skullMeta = (SkullMeta) skull.getItemMeta();
        UUID playerUuid = p.getUniqueId();
        skullMeta.setDisplayName("Glowka A");

        //skullMeta.setOwner(p.getName()); //DEPRECIATED
        //skullMeta.setOwningPlayer(Bukkit.getOfflinePlayer("filipppos"));
        skullMeta.setOwningPlayer(p);
        skull.setItemMeta(skullMeta); // Apply the modified meta to the initial created item
        inventory.addItem(skull);

        // GLOWKA 2
        String testVal="eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZjg1N2IwODZkZjYxNDc1MjVlMTMxODgyOWQ0ODdjNmJjZTI1MDE0YzMxZTYwNjkyZGY1MDkyZjMzOTIwMDVhOSJ9fX0=";
        ItemStack glowka2 = getHeadFromValue(testVal);
        inventory.addItem(glowka2);

        //GLOWKA 3
        String testVal3="eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMjIwYzJiNzkxYzJmYmY0NTFhYmVlZjIzNTI1ZjMxM2FmMTQzN2QyZmNhYjY5YzMyNzM0ZDM3OWI2NTZhZjE1ZiJ9fX0=";
        ItemStack glowka3 = new ItemStack(Material.PLAYER_HEAD);
        glowka3 = ustawTexture(glowka3,testVal3);
        inventory.addItem(glowka3);
        //GLOWKA 4
        String testVal4 = "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYWZiNTZhZWRmMzJjYjRlZTNjYWJmN2U2Mjg0YTJjN2UzZTFjYmQwNDY3YmI5NzgwNjQ4MWY1NjM2YTI1MzE4ZSJ9fX0=";
        ItemStack glowka4 = makeSkull(testVal4);
        inventory.addItem(glowka4);
*/



    ===========================================================================
    BASE64 , W OBIE STRONY DO ITEMSTACK
    ===========================================================================
    //Conversion to Base64 code courtesy of github.com/JustRayz
    private String toBase64(Inventory inventory) {
        return toBase64(inventory.getContents());
    }

    private String toBase64(ItemStack[] contents) {
        try {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            BukkitObjectOutputStream dataOutput = new BukkitObjectOutputStream(outputStream);

            dataOutput.writeInt(contents.length);

            for (ItemStack stack : contents) {
                dataOutput.writeObject(stack);
            }
            dataOutput.close();
            return Base64Coder.encodeLines(outputStream.toByteArray());
        } catch (Exception e) {
            throw new IllegalStateException("Unable to save item stacks.", e);
        }
    }

    //
    // KONWERSJA Z BASE64
    //

    public ItemStack[] retrieveMainInventory() {
        ItemStack[] inv = null;

        try {
            //tu string
            //inv = stacksFromBase64(playerData.getString("data." + timestamp + ".inventory"));
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }

        return inv;
    }

    public ItemStack[] retrieveArmour() {
        ItemStack[] inv = null;

        try {
            //tu string
            //inv = stacksFromBase64(playerData.getString("data." + timestamp + ".armour"));

            if (inv.length == 0)
                inv = null;
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }

        return inv;
    }

    private ItemStack[] stacksFromBase64(String data) {
        if (data == null || Base64Coder.decodeLines(data).equals(null))
            return new ItemStack[]{};

        ByteArrayInputStream inputStream = new ByteArrayInputStream(Base64Coder.decodeLines(data));
        BukkitObjectInputStream dataInput = null;
        ItemStack[] stacks = null;

        try {
            dataInput = new BukkitObjectInputStream(inputStream);
            stacks = new ItemStack[dataInput.readInt()];
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        for (int i = 0; i < stacks.length; i++) {
            try {
                stacks[i] = (ItemStack) dataInput.readObject();
            } catch (IOException | ClassNotFoundException e) {
/*
                String packageVersion = playerData.getString("data." + timestamp + ".version");

                //Backup generated before InventoryRollback 1.3
                if (packageVersion == null) {
                    InventoryRollback.logger.log(Level.SEVERE, ChatColor.stripColor(MessageData.pluginName) + "There was an error deserializing the material data. This is likely caused by a now incompatible material ID if the backup was originally generated on a different Minecraft server version.");
                }
                //Backup was not generated on the same server version
                else if (!packageVersion.equalsIgnoreCase(InventoryRollback.getPackageVersion())) {
                    InventoryRollback.logger.log(Level.SEVERE, ChatColor.stripColor(MessageData.pluginName) + "There was an error deserializing the material data. The backup was generated on a " + packageVersion + " version server whereas you are now running a " + InventoryRollback.getPackageVersion() + " version server. It is likely a material ID inside the backup is no longer valid on this Minecraft server version and cannot be convereted.");
                }
                //Unknown error
                else if (packageVersion.equalsIgnoreCase(InventoryRollback.getPackageVersion())) {
                    InventoryRollback.logger.log(Level.SEVERE, ChatColor.stripColor(MessageData.pluginName) + "There was an error deserializing the material data. Please upload the affected players backup file to Pastebin and send a link to it in the discussion page on Spigot for InventoryRollback detailing the problem as accurately as you can.");
                }
*/
                try {
                    dataInput.close();
                } catch (IOException ignored) {
                }
                return null;
            }
        }

        try {
            dataInput.close();
        } catch (IOException ignored) {
        }

        return stacks;
    }
